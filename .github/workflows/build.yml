name: Build OfX and Publish

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*' # triggers when a version tag is pushed (e.g. v7.1.1)
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: 'build ofx project'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # IMPORTANT: fetch tags for version calculation
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
  
  testing-efcore:
    needs: build
    name: "testing-efCore"
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x
            8.0.x
      - name: Test Full
        run: dotnet test -c Release --filter "FullyQualifiedName~OfXEfCoreTests"
        working-directory: src/OfX.Tests
  
  testing-mongodb:
    needs: build
    name: "testing-mongodb"
    timeout-minutes: 10
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x
            8.0.x
      - name: Test Full
        run: dotnet test -c Release --filter "FullyQualifiedName~OfMongoDbTests"
        working-directory: src/OfX.Tests
  
  calc-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    needs:
      - build
      - testing-efcore
      - testing-mongodb
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: version
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$TAG" ]; then
            VERSION=${TAG#v} # remove leading 'v'
          else
            VERSION="0.0.0-develop.${GITHUB_RUN_NUMBER}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
  
  publish:
    name: Build and Publish NuGets
    timeout-minutes: 60
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/')) && success()
    needs:
      - calc-version
    steps:
      - name: Version Output Check
        run: echo "Publishing version ${{ needs.calc-version.outputs.version }}"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build All Projects
        run: dotnet build -c Release -p:Version=${{ needs.calc-version.outputs.version }}

      - name: Pack All Projects
        run: dotnet pack --no-build -c Release -p:PackageVersion=${{ needs.calc-version.outputs.version }} -o ./artifacts

      - name: List Packed Files
        run: ls -al ./artifacts

      - name: Publish NuGets
        working-directory: artifacts
        run: |
          for file in OfX*.nupkg; do
            echo "Pushing $file"
            dotnet nuget push "$file" -s https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET_API_KEY }} --skip-duplicate --no-symbols
          done
