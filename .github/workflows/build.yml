# This workflow will build and test your .NET project for both .NET 8 and .NET 9
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build OfX and Publish
env:
  OFX_VERSION: 5.0.13
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ "9.0.x" ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Restore dependencies
        run: dotnet restore
        working-director: ./
      - name: Build
        run: dotnet build --no-restore
        working-directory: ./
  
  calc-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      version: ${{ steps.v.outputs.version }}
    steps:
      - id: v
        run: |
          if [ "${{ github.ref }}" = 'refs/heads/master' ]; then
            echo "version=${OFX_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "version=${OFX_VERSION}-develop.${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi
  
  publish:
    name: Build and Publish NuGets
    timeout-minutes: 60
    runs-on: windows-latest
    if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') && success()
    env:
      DOTNET_INSTALL_DIR: D:\dotnet
      NUGET_PACKAGES: D:\.nuget\packages
    needs:
      - calc-version
    steps:
      - name: Version Output Check
        run: |
          echo "${{ needs.calc-version.outputs.version }}"

      - name: Check out code
        uses: actions/checkout@v4

      - name: Install .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Build and Pack Solution
        run: |
          dotnet build -c Release -p:Version=${{ needs.calc-version.outputs.version }}
          dotnet pack --no-build -c Release -p:PackageVersion=${{ needs.calc-version.outputs.version }} -o ./artifacts

      - name: Publish NuGets
        working-directory: artifacts
        run: |
          dotnet nuget push * -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}} --skip-duplicate --no-symbols
  
